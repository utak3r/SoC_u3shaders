#include "options.h"
#include "common.h"
#include "lmodel.h"
#include "shadow.h"
#define SUN_FARPLANE 180.f
float4 	SunShafts (float2 tc , float4 tcJ )
{	
	float3 P = tex2D(s_position, tc).xyz;
	float4	J0 	= tex2D		(jitter0,tcJ);
	float coeff = (RAY_SAMPLES - 2*J0.x)/(RAY_SAMPLES*RAY_SAMPLES) ;		
	float3 direction = P*coeff;
	float4 current	= mul (m_shadow,float4(P,1));
	float4 delta 	= mul (m_shadow, float4(direction,0));
	float res = 0;
	float density = SS_INTENSITY/RAY_SAMPLES;
	for ( int i=0; i<RAY_SAMPLES; ++i )
	{
	#ifdef	USE_HWSMAP
		#ifdef USE_FETCH4
			res += density*( sample_hw_f4(current,float4(0,0,0,0)) );
			#else
			res += density*( sample_hw_pcf(current,float4(0,0,0,0)) );
			#endif
	#else
			res += density*( sample_sw(current.xy/current.w,float2(0,0),current.z) );
	#endif
			current -= delta;
	}
	return res*Ldynamic_color;
}
	#ifndef USE_F32
#ifdef USE_SUNFILTER
	
float4 	main		( float2 tc : TEXCOORD0, float4 tcJ : TEXCOORD1 ) : COLOR
{
  float4 	_P	= tex2D 	(s_position, 	tc);
		_P.w 	= 1.f		;
	float4 	PS	= mul		(m_shadow, 	_P);
#ifdef 	USE_HWSMAP
	half 	s 	= sunmask(_P)*sample_hw	(PS,float4(0,0,0,0) );
#else
	half 	s 	= sunmask(_P)*sample_sw	(PS.xy / PS.w, float2(0,0), PS.z);
#endif
	return 	s	;
}
#else
float4 	main		( float2 tc : TEXCOORD0, float4 tcJ : TEXCOORD1 ) : COLOR
{
  float4 _P		= tex2D 	(s_position, 	tc);
  half4  _N		= tex2D 	(s_normal,   	tc);

	// ----- light-model
	half 	m	= xmaterial	;
# ifndef USE_R2_STATIC_SUN
			m 	= _P.w		;
# endif
	float4 ss = 0;
	#ifdef SS_FARNEARLERP
	if(_P.z>11.976 && _P.z<30) ss = SunShafts(tc,tcJ)/1.7+((0-SunShafts(tc,tcJ)/1.7)*(_P.z-11.976))/(30-11.976);
	#else
	ss = SunShafts(tc,tcJ); 
	#endif
	half4	light 	= plight_infinity (m,_P,_N,Ldynamic_dir);

	// ----- shadow
  	float4 	P4 	= float4	(_P.x,_P.y,_P.z,1);
	float4 	PS	= mul		(m_shadow, 	P4);
#ifdef	USE_HWSMAP
	#ifdef USE_FETCH4
		half 	s 	= sunmask(P4)*sample_hw_f4	(PS, float4(0,0,0,0) );
	#else
		half 	s 	= sunmask(P4)*sample_hw_pcf	(PS, float4(0,0,0,0) );
	#endif
#else
	half 	s 	= sunmask(P4)*sample_sw	(PS.xy / PS.w, float2(0,0), PS.z);
#endif


#ifdef 	SUN_FARPLANE
	float f		= saturate	(_P.z/SUN_FARPLANE);
	s			= lerp		(s, 0.333h, f*f);
#endif

	#ifdef SUN_SHAFTS
	return blend(lerp((Ldynamic_color*light*s)*SS_CONTRAST,ss,light),tc);
	#else
	return 	blend		((Ldynamic_color * light * s), tc);
	#endif
	//return 	blend		((Ldynamic_color * lerp(light,s*light,light)), tc);
}
#endif
	#else
#ifdef USE_SUNFILTER
float4 	main		( float2 tc : TEXCOORD0, float4 tcJ : TEXCOORD1, float3 T : TANGENT, float4 color : COLOR0 ) : COLOR
{
  float4 	_P	= tex2D 	(s_position, 	tc);
		_P.w 	= 1.f		;
	float4 	PS	= mul		(m_shadow, 	_P);
#ifdef 	USE_HWSMAP
	half 	s 	= sunmask(_P)*sample_hw	(PS,float4(0,0,0,0) );
#else
	half 	s 	= sunmask(_P)*sample_sw	(PS.xy / PS.w, float2(0,0), PS.z);

#endif
	return 	s	;
	
	// old: 	half 	s 	= sunmask(_P)*shadow_hw_f4	(PS);

}
#else 
float4 	main		( float2 tc : TEXCOORD0, float4 tcJ : TEXCOORD1, float3 T : TANGENT, float4 color : COLOR0 ) : COLOR
{
  float4 _P		= tex2D 	(s_position, 	tc);
  half4  _N		= tex2D 	(s_normal,   	tc);
  float3 TX		= tan(_N);

	// ----- light-model
	half 	m	= xmaterial	;
# ifndef USE_R2_STATIC_SUN
			m 	= _P.w		;
# endif
	float4 ss = 0;
	#ifdef SS_FARNEARLERP
	if(_P.z>11.976 && _P.z<30) ss = SunShafts(tc,tcJ)/1.7+((0-SunShafts(tc,tcJ)/1.7)*(_P.z-11.976))/(30-11.976);
	#else
	ss = SunShafts(tc,tcJ); 
	#endif
	half4	light 	= plight_infinity2 (m,_P,_N,Ldynamic_dir,TX,color);

	// ----- shadow
  	float4 	P4 	= float4	(_P.x,_P.y,_P.z,1);
	float4 	PS	= mul		(m_shadow, 	P4);
#ifdef	USE_HWSMAP
	#ifdef USE_FETCH4
		half 	s 	= sunmask(P4)*shadow_hw_f4	(PS);
	#else
		half 	s 	= sunmask(P4)*sample_hw_pcf_far	(PS);
	#endif
#else
	half 	s 	= sunmask(P4)*sample_sw	(PS.xy / PS.w, float2(1,0), PS.z);
#endif


#ifdef 	SUN_FARPLANE
	float f		= saturate	(_P.z/SUN_FARPLANE);
	s			= lerp		(s, 0.333h, f*f);
#endif
	#ifdef SUN_SHAFTS
	return blend(lerp((Ldynamic_color*light*s)*SS_CONTRAST,ss,light),tc);
	#else
	return 	blend		((Ldynamic_color * light * s), tc);
	#endif
}
#endif
	#endif