#include "common.h"
#include "lmodel.h"
#include "hmodel.h"

struct _input {
float4 hpos:POSITION;
#ifdef USE_VTF
float4 tc0:TEXCOORD0;
#else
float2 tc0:TEXCOORD0;
#endif
};

struct _out {
half4 low:COLOR0;
half4 high:COLOR1;
};

uniform sampler1D fog_table;
//uniform sampler2D jitter0;

_out main(_input I) 
{
	float4 P=tex2D(s_position,I.tc0);
	half4 N=tex2D(s_normal,I.tc0);
	half4 D=tex2D(s_diffuse,I.tc0);
	half4 L=tex2D(s_accumulator,I.tc0);
			
	#ifdef USE_SUPER_SPECULAR	
		half ds=dot(D.rgb,1.h/3.h);
		D.w=max(D.w,ds*ds/8.h);	
	#endif
	#ifdef FORCE_GLOSS
		D.w=FORCE_GLOSS;
	#endif
	#ifdef USE_GAMMA_22
		D.rgb=(D.rgb*D.rgb);
	#endif
	
	#ifdef USE_R2_STATIC_SUN
		half mtl=xmaterial;	
		L+=Ldynamic_color*P.w*2*plight_infinity (mtl,P.xyz,N.xyz,Ldynamic_dir);
	#else
		half mtl=P.w;
	#endif
	
	half3 hdiffuse,hspecular;		
	hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
	
	#ifdef SSAO			
		half occ=calc_ssao_new(P,N,I.tc0);
		hdiffuse*=occ;
		hspecular*=occ;
	#else
		hmodel(hdiffuse,hspecular,mtl,N.w,D.w,P.xyz,N.xyz);
	#endif
	#ifdef TEX_CONT
		hdiffuse*=((D.rgb*TEX_CONT_COEF)+TEX_CONT_ADD);
	#endif

	half4 C=D*(half4(L.rgb+hdiffuse,L.w));
	float fog=saturate(length(P.xyz)*fog_params.w+fog_params.x);
	
	#ifdef DBG_TMAPPING
		half3 color=D.xyz;
	#else
		#ifdef USE_SUPER_SPECULAR
			half3 color=half3((C.rgb*.5h+.5h)*C.w+hspecular)-hspecular;
		#else
			half3 color=lerp(half3(C.rgb+half3(C.www+hspecular)),fog_color,fog);
		#endif
	#endif
	
	#ifdef USE_VTF
		half tm_scale=I.tc0.w;
	#else
		half tm_scale=tex2D(s_tonemap,I.tc0).x;
	#endif
			
	#ifdef SATURATION_FILTER
		float gray=dot(color.xyz,float3(0.3,0.59,0.11));
		color.xyz=lerp(float3(gray,gray,gray),color.xyz,COLOR_SATURATION+(dot(Ldynamic_color.xyz,float3(1,1,1))/3)*COLOR_SAT_SUN_COEF);
	#endif
	
	_out o;		
	tonemap(o.low,o.high,color,tm_scale);
	half skyblend=lerp(0,fog,pow(fog,5));
	o.low.a=skyblend;
	o.high.a=skyblend;
	
	return o;
}
